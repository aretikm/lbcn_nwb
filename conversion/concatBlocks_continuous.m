function data_all = concatBlocks_continuous(sbj_name, block_names,dirs,el,freq_band,datatype,concatfields, ext_name)
%CONCATBLOCKS concatenate data across blocks for single electrode
%   function concatenates data (either spectral or single timecourse) 
%   across blocks for a single electrode
%
%   INPUTS:
%       sbj_name: subject name
%       block_names: blocks to be analyed (cell of strings)
%       dirs: directories pointing to files of interest (generated by InitializeDirs)
%       el: electrode number
%       datatype: 'CAR','HFB',or 'RAW'
%       concatfields: cell of field(s) in data to concatenate (e.g.
%                     'phase', 'wave') in addition to trialinfo
%       ext_name: extended version of sbj_name (used for accessing correct
%                 folders/files)
%
%   Laboratory of Behavioral and Cognitive Neuroscience, Stanford University
%   Authors: Pedro Pinheiro-Chagas, Areti Majumdar
%   Copyright: MIT License 2021   
%%

for i = 1:length(concatfields)
    data_all.(concatfields{i}) = [];
end

data_all.trialinfo = [];
for bi = 1:length(block_names)
    bn = block_names{bi};
    if datatype == 'RAW'
        
        raw_dir_in = [dirs.original_data filesep ext_name{1} filesep bn];
        load(sprintf('%s/iEEG%s_%.2d.mat', raw_dir_in, bn, el));
    end
        %dir_in = [dirs.data_root,filesep,datatype,'Data',filesep,freq_band,filesep,ext_name{1},filesep,bn];
        dir_in = [dirs.data_root,filesep,'CAR','Data',filesep,'CAR',filesep,ext_name{1},filesep,bn];
        load(sprintf('%s/%siEEG%s_%.2d.mat',dir_in,'CAR',bn,el));
    

    
    % concatenante EEG data across blocks
    for i = 1:length(concatfields)
        
            if datatype == 'RAW'
                data_all.wave = cat(1, data_all.wave, wave);

            else
                data_all.(concatfields{i}) = cat(1,data_all.(concatfields{i}),data.(concatfields{i}));
            end
            
    end
end

%add all additional info back to concatenated data structure (e.g. channame, time, freq)
allfields = setdiff(fieldnames(data),{'wave'});
for fi = 1:length(allfields)
    data_all.(allfields{fi})=data.(allfields{fi});
end

%add pdio
if datatype == 'RAW'
    pdio_file = [raw_dir_in filesep 'Pdio' bn '_02.mat'];
    load(pdio_file);
    data_all.pdio = anlg;
end

